{
  "openapi": "3.0.3",
  "info": {
    "title": "tenant_api",
    "version": "0.9"
  },
  "paths": {
    "/chat/groups/": {
      "get": {
        "operationId": "chat_groups_list",
        "summary": "List Chat Group",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChatGroupList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "chat_groups_create",
        "summary": "Create Chat Group",
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ChatGroupCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatGroupCreateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ChatGroupCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatGroupCreate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/chat/groups/{group_id}/current_chat_member": {
      "get": {
        "operationId": "chat_groups_current_chat_member_retrieve",
        "summary": "Retrieve Chat Members",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentChatMember"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "chat_groups_current_chat_member_update",
        "summary": "Update Chat Members",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CurrentChatMemberRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrentChatMemberRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CurrentChatMemberRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentChatMember"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "chat_groups_current_chat_member_partial_update",
        "summary": "Partial Update Chat Members",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCurrentChatMemberRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCurrentChatMemberRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCurrentChatMemberRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentChatMember"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/chat/groups/{group_id}/messages": {
      "get": {
        "operationId": "chat_groups_messages_list",
        "summary": "List Chat Messages",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChatMessageList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/chat/groups/{group_id}/messages/upload": {
      "get": {
        "operationId": "chat_groups_messages_upload_list",
        "summary": "List Chat Upload file",
        "parameters": [
          {
            "in": "query",
            "name": "file_type",
            "schema": {
              "type": "string",
              "enum": [
                "fields",
                "files"
              ]
            },
            "description": "The type of files to retrieve."
          },
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChatMessageFileList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "chat_groups_messages_upload_create",
        "summary": "Create Chat Upload file",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessageFileRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessageFileRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessageFileRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageFile"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/chat/groups/{group_id}/shared_links": {
      "get": {
        "operationId": "chat_groups_shared_links_list",
        "summary": "List Chat Shared Links",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSharedLinkList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/chat/groups/{id}/": {
      "get": {
        "operationId": "chat_groups_retrieve",
        "summary": "Retrieve Chat Group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this chat group.",
            "required": true
          }
        ],
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatGroup"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "chat_groups_update",
        "summary": "Update Chat Group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this chat group.",
            "required": true
          }
        ],
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ChatGroupRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatGroupRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ChatGroupRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatGroup"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "chat_groups_partial_update",
        "summary": "Partial Update Chat Group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this chat group.",
            "required": true
          }
        ],
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedChatGroupRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedChatGroupRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedChatGroupRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatGroup"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "chat_groups_destroy",
        "summary": "Delete Chat Group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this chat group.",
            "required": true
          }
        ],
        "tags": [
          "Chat"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/child/daily_summary/": {
      "get": {
        "operationId": "child_daily_summary_list",
        "summary": "List Child : Child Day Summary Child Day Summary",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Child : Child Day Summary"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDaySummaryList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "child_daily_summary_create",
        "summary": "Create Child : Child Day Summary Child Day Summary",
        "tags": [
          "Child : Child Day Summary"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DaySummaryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DaySummaryRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DaySummaryRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DaySummary"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/child/daily_summary/{id}/": {
      "get": {
        "operationId": "child_daily_summary_retrieve",
        "summary": "Retrieve Child : Child Day Summary Child Day Summary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this day summary.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Child : Child Day Summary"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DaySummary"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "child_daily_summary_update",
        "summary": "Update Child : Child Day Summary Child Day Summary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this day summary.",
            "required": true
          }
        ],
        "tags": [
          "Child : Child Day Summary"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DaySummaryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DaySummaryRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DaySummaryRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DaySummary"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "child_daily_summary_partial_update",
        "summary": "Partial Update Child : Child Day Summary Child Day Summary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this day summary.",
            "required": true
          }
        ],
        "tags": [
          "Child : Child Day Summary"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDaySummaryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDaySummaryRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDaySummaryRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DaySummary"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "child_daily_summary_destroy",
        "summary": "Delete Child : Child Day Summary Child Day Summary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this day summary.",
            "required": true
          }
        ],
        "tags": [
          "Child : Child Day Summary"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/educator_timesheet/availability/": {
      "get": {
        "operationId": "educator_timesheet_availability_list",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "List EducatorTimeSheet : Availability Availability",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "EducatorTimeSheet : Availability"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEducatorAvailabilityList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "educator_timesheet_availability_create",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Create EducatorTimeSheet : Availability Availability",
        "tags": [
          "EducatorTimeSheet : Availability"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EducatorAvailabilityRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EducatorAvailabilityRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EducatorAvailabilityRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorAvailability"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "educator_timesheet_availability_bulk_update",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Bulk Update EducatorTimeSheet : Availability Availability",
        "tags": [
          "EducatorTimeSheet : Availability"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EducatorAvailabilityRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EducatorAvailabilityRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EducatorAvailabilityRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EducatorAvailability"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "educator_timesheet_availability_partial_bulk_update",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Partial Bulk Update EducatorTimeSheet : Availability Availability",
        "tags": [
          "EducatorTimeSheet : Availability"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorAvailabilityRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorAvailabilityRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorAvailabilityRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EducatorAvailability"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "educator_timesheet_availability_bulk_destroy",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Bulk Delete EducatorTimeSheet : Availability Availability",
        "tags": [
          "EducatorTimeSheet : Availability"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/educator_timesheet/availability/{id}/": {
      "get": {
        "operationId": "educator_timesheet_availability_retrieve",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Retrieve EducatorTimeSheet : Availability Availability",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator availability.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "EducatorTimeSheet : Availability"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorAvailability"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "educator_timesheet_availability_update",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Update EducatorTimeSheet : Availability Availability",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator availability.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Availability"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EducatorAvailabilityRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EducatorAvailabilityRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EducatorAvailabilityRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorAvailability"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "educator_timesheet_availability_partial_update",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Partial Update EducatorTimeSheet : Availability Availability",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator availability.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Availability"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorAvailabilityRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorAvailabilityRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorAvailabilityRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorAvailability"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "educator_timesheet_availability_destroy",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Delete EducatorTimeSheet : Availability Availability",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator availability.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Availability"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/educator_timesheet/schedule/": {
      "get": {
        "operationId": "educator_timesheet_schedule_list",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "List EducatorTimeSheet : Schedule Schedule",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "EducatorTimeSheet : Schedule"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEducatorScheduleList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "educator_timesheet_schedule_create",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Create EducatorTimeSheet : Schedule Schedule",
        "tags": [
          "EducatorTimeSheet : Schedule"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EducatorScheduleRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EducatorScheduleRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EducatorScheduleRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorSchedule"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "educator_timesheet_schedule_bulk_update",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Bulk Update EducatorTimeSheet : Schedule Schedule",
        "tags": [
          "EducatorTimeSheet : Schedule"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EducatorScheduleRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EducatorScheduleRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EducatorScheduleRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EducatorSchedule"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "educator_timesheet_schedule_partial_bulk_update",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Partial Bulk Update EducatorTimeSheet : Schedule Schedule",
        "tags": [
          "EducatorTimeSheet : Schedule"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorScheduleRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorScheduleRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorScheduleRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EducatorSchedule"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "educator_timesheet_schedule_bulk_destroy",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Bulk Delete EducatorTimeSheet : Schedule Schedule",
        "tags": [
          "EducatorTimeSheet : Schedule"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/educator_timesheet/schedule/{id}/": {
      "get": {
        "operationId": "educator_timesheet_schedule_retrieve",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Retrieve EducatorTimeSheet : Schedule Schedule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator schedule.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "EducatorTimeSheet : Schedule"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorSchedule"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "educator_timesheet_schedule_update",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Update EducatorTimeSheet : Schedule Schedule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator schedule.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Schedule"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EducatorScheduleRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EducatorScheduleRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EducatorScheduleRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorSchedule"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "educator_timesheet_schedule_partial_update",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Partial Update EducatorTimeSheet : Schedule Schedule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator schedule.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Schedule"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorScheduleRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorScheduleRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorScheduleRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorSchedule"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "educator_timesheet_schedule_destroy",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Delete EducatorTimeSheet : Schedule Schedule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator schedule.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Schedule"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/educator_timesheet/schedule_clone/": {
      "post": {
        "operationId": "educator_timesheet_schedule_clone_create",
        "description": "Clone educator schedules within a specified date range.",
        "summary": "Create EducatorTimeSheet : Schedule Clone",
        "tags": [
          "EducatorTimeSheet : Schedule"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleRequestRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleRequestRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleRequestRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EducatorSchedule"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/educator_timesheet/settings/": {
      "get": {
        "operationId": "educator_timesheet_settings_list",
        "summary": "List EducatorTimeSheet : Settings : General General Settings",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : General"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGeneralEducatorTimeSheetSettingsList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "educator_timesheet_settings_create",
        "summary": "Create EducatorTimeSheet : Settings : General General Settings",
        "tags": [
          "EducatorTimeSheet : Settings : General"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GeneralEducatorTimeSheetSettingsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralEducatorTimeSheetSettingsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GeneralEducatorTimeSheetSettingsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralEducatorTimeSheetSettings"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/educator_timesheet/settings/{id}/": {
      "get": {
        "operationId": "educator_timesheet_settings_retrieve",
        "summary": "Retrieve EducatorTimeSheet : Settings : General General Settings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this general educator time sheet settings.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : General"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralEducatorTimeSheetSettings"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "educator_timesheet_settings_update",
        "summary": "Update EducatorTimeSheet : Settings : General General Settings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this general educator time sheet settings.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : General"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GeneralEducatorTimeSheetSettingsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralEducatorTimeSheetSettingsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GeneralEducatorTimeSheetSettingsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralEducatorTimeSheetSettings"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "educator_timesheet_settings_partial_update",
        "summary": "Partial Update EducatorTimeSheet : Settings : General General Settings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this general educator time sheet settings.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : General"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGeneralEducatorTimeSheetSettingsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGeneralEducatorTimeSheetSettingsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGeneralEducatorTimeSheetSettingsRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralEducatorTimeSheetSettings"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "educator_timesheet_settings_destroy",
        "summary": "Delete EducatorTimeSheet : Settings : General General Settings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this general educator time sheet settings.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : General"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/educator_timesheet/settings/experience/": {
      "get": {
        "operationId": "educator_timesheet_settings_experience_list",
        "summary": "List EducatorTimeSheet : Settings : ExperienceLevel ExperienceLevel Settings",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : ExperienceLevel"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEducatorExperienceLevelSettingsList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "educator_timesheet_settings_experience_create",
        "summary": "Create EducatorTimeSheet : Settings : ExperienceLevel ExperienceLevel Settings",
        "tags": [
          "EducatorTimeSheet : Settings : ExperienceLevel"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EducatorExperienceLevelSettingsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EducatorExperienceLevelSettingsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EducatorExperienceLevelSettingsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorExperienceLevelSettings"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/educator_timesheet/settings/experience/{id}/": {
      "get": {
        "operationId": "educator_timesheet_settings_experience_retrieve",
        "summary": "Retrieve EducatorTimeSheet : Settings : ExperienceLevel ExperienceLevel Settings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator experience level settings.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : ExperienceLevel"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorExperienceLevelSettings"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "educator_timesheet_settings_experience_update",
        "summary": "Update EducatorTimeSheet : Settings : ExperienceLevel ExperienceLevel Settings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator experience level settings.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : ExperienceLevel"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EducatorExperienceLevelSettingsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EducatorExperienceLevelSettingsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EducatorExperienceLevelSettingsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorExperienceLevelSettings"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "educator_timesheet_settings_experience_partial_update",
        "summary": "Partial Update EducatorTimeSheet : Settings : ExperienceLevel ExperienceLevel Settings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator experience level settings.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : ExperienceLevel"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorExperienceLevelSettingsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorExperienceLevelSettingsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorExperienceLevelSettingsRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorExperienceLevelSettings"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "educator_timesheet_settings_experience_destroy",
        "summary": "Delete EducatorTimeSheet : Settings : ExperienceLevel ExperienceLevel Settings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator experience level settings.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : ExperienceLevel"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/educator_timesheet/settings/individual/": {
      "get": {
        "operationId": "educator_timesheet_settings_individual_list",
        "summary": "List EducatorTimeSheet : Settings : Individual Individual Settings",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : Individual"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedIndividualEmployeeTimeSheetSettingsList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "educator_timesheet_settings_individual_create",
        "summary": "Create EducatorTimeSheet : Settings : Individual Individual Settings",
        "tags": [
          "EducatorTimeSheet : Settings : Individual"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IndividualEmployeeTimeSheetSettingsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndividualEmployeeTimeSheetSettingsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IndividualEmployeeTimeSheetSettingsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualEmployeeTimeSheetSettings"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/educator_timesheet/settings/individual/{id}/": {
      "get": {
        "operationId": "educator_timesheet_settings_individual_retrieve",
        "summary": "Retrieve EducatorTimeSheet : Settings : Individual Individual Settings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this individual employee time sheet settings.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : Individual"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualEmployeeTimeSheetSettings"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "educator_timesheet_settings_individual_update",
        "summary": "Update EducatorTimeSheet : Settings : Individual Individual Settings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this individual employee time sheet settings.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : Individual"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IndividualEmployeeTimeSheetSettingsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndividualEmployeeTimeSheetSettingsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IndividualEmployeeTimeSheetSettingsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualEmployeeTimeSheetSettings"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "educator_timesheet_settings_individual_partial_update",
        "summary": "Partial Update EducatorTimeSheet : Settings : Individual Individual Settings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this individual employee time sheet settings.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : Individual"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedIndividualEmployeeTimeSheetSettingsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedIndividualEmployeeTimeSheetSettingsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedIndividualEmployeeTimeSheetSettingsRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualEmployeeTimeSheetSettings"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "educator_timesheet_settings_individual_destroy",
        "summary": "Delete EducatorTimeSheet : Settings : Individual Individual Settings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this individual employee time sheet settings.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : Settings : Individual"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/educator_timesheet/timesheet/": {
      "get": {
        "operationId": "educator_timesheet_timesheet_list",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "List EducatorTimeSheet : TimeSheet TimeSheet",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "EducatorTimeSheet : TimeSheet"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEducatorTimeSheetList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "educator_timesheet_timesheet_create",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Create EducatorTimeSheet : TimeSheet TimeSheet",
        "tags": [
          "EducatorTimeSheet : TimeSheet"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EducatorTimeSheetRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EducatorTimeSheetRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EducatorTimeSheetRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorTimeSheet"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "educator_timesheet_timesheet_bulk_update",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Bulk Update EducatorTimeSheet : TimeSheet TimeSheet",
        "tags": [
          "EducatorTimeSheet : TimeSheet"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EducatorTimeSheetRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EducatorTimeSheetRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EducatorTimeSheetRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EducatorTimeSheet"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "educator_timesheet_timesheet_partial_bulk_update",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Partial Bulk Update EducatorTimeSheet : TimeSheet TimeSheet",
        "tags": [
          "EducatorTimeSheet : TimeSheet"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorTimeSheetRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorTimeSheetRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorTimeSheetRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EducatorTimeSheet"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "educator_timesheet_timesheet_bulk_destroy",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Bulk Delete EducatorTimeSheet : TimeSheet TimeSheet",
        "tags": [
          "EducatorTimeSheet : TimeSheet"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/educator_timesheet/timesheet/{id}/": {
      "get": {
        "operationId": "educator_timesheet_timesheet_retrieve",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Retrieve EducatorTimeSheet : TimeSheet TimeSheet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator time sheet.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "EducatorTimeSheet : TimeSheet"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorTimeSheet"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "educator_timesheet_timesheet_update",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Update EducatorTimeSheet : TimeSheet TimeSheet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator time sheet.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : TimeSheet"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EducatorTimeSheetRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EducatorTimeSheetRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EducatorTimeSheetRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorTimeSheet"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "educator_timesheet_timesheet_partial_update",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Partial Update EducatorTimeSheet : TimeSheet TimeSheet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator time sheet.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : TimeSheet"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorTimeSheetRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorTimeSheetRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorTimeSheetRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorTimeSheet"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "educator_timesheet_timesheet_destroy",
        "description": "Either create a single or many model instances in bulk by using the\nSerializers ``many=True`` ability from Django REST >= 2.2.5.\n\n.. note::\n    This mixin uses the same method to create model instances\n    as ``CreateModelMixin`` because both non-bulk and bulk\n    requests will use ``POST`` request method.",
        "summary": "Delete EducatorTimeSheet : TimeSheet TimeSheet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator time sheet.",
            "required": true
          }
        ],
        "tags": [
          "EducatorTimeSheet : TimeSheet"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/events/": {
      "get": {
        "operationId": "events_list",
        "summary": "List Calendar : Event Event",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Calendar : Event"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEventList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "events_create",
        "summary": "Create Calendar : Event Event",
        "tags": [
          "Calendar : Event"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EventRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EventRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/events/{id}/": {
      "get": {
        "operationId": "events_retrieve",
        "summary": "Retrieve Calendar : Event Event",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this event.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Calendar : Event"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "events_update",
        "summary": "Update Calendar : Event Event",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this event.",
            "required": true
          }
        ],
        "tags": [
          "Calendar : Event"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EventRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EventRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "events_partial_update",
        "summary": "Partial Update Calendar : Event Event",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this event.",
            "required": true
          }
        ],
        "tags": [
          "Calendar : Event"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEventRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEventRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEventRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "events_destroy",
        "summary": "Delete Calendar : Event Event",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this event.",
            "required": true
          }
        ],
        "tags": [
          "Calendar : Event"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/events/events_occurrence/": {
      "get": {
        "operationId": "events_events_occurrence_list",
        "summary": "List Calendar : Event EventOccurrence",
        "parameters": [
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Calendar : Event"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEventOccurrenceList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/governance_docs/documents/fiche_contact/": {
      "post": {
        "operationId": "governance_docs_documents_fiche_contact_create",
        "summary": "Create Reports Fiche contact",
        "tags": [
          "Reports"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsFicheContactsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsFicheContactsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsFicheContactsRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "CSVFicheContact": {
                    "value": "dataset,filename,start_time,end_time,start_frequency,end_frequency,annotation,annotator,start_datetime,end_datetime,is_box\nSPM Aural B,sound000.wav,284.0,493.0,5794.0,8359.0,Boat,Albert,2012-05-03T11:10:03+00:00,2012-05-03T11:10:48+00:00,1",
                    "summary": "CSV fiche contact"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/governance_docs/reports/personalized_report/": {
      "post": {
        "operationId": "governance_docs_reports_personalized_report_create",
        "summary": "Create Reports Child Report",
        "tags": [
          "Reports"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RequestReportRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestReportRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RequestReportRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "CSVChildReport": {
                    "value": "dataset,filename,start_time,end_time,start_frequency,end_frequency,annotation,annotator,start_datetime,end_datetime,is_box\nSPM Aural B,sound000.wav,284.0,493.0,5794.0,8359.0,Boat,Albert,2012-05-03T11:10:03+00:00,2012-05-03T11:10:48+00:00,1",
                    "summary": "CSV child report"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/group/": {
      "get": {
        "operationId": "group_list",
        "summary": "List Group Group",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Group"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGroupList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "group_create",
        "summary": "Create Group Group",
        "tags": [
          "Group"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/group/{id}/": {
      "get": {
        "operationId": "group_retrieve",
        "summary": "Retrieve Group Group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Group"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "group_update",
        "summary": "Update Group Group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          }
        ],
        "tags": [
          "Group"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "group_partial_update",
        "summary": "Partial Update Group Group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          }
        ],
        "tags": [
          "Group"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroupRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroupRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroupRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "group_destroy",
        "summary": "Delete Group Group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          }
        ],
        "tags": [
          "Group"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/media/upload_signature/": {
      "post": {
        "operationId": "media_upload_signature_create",
        "description": "Confirm the signed-up family by Kindergarten using the email invitation.",
        "summary": "Create Media : Upload Signature Get upload signature",
        "tags": [
          "Media : Upload Signature"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Request"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Request"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Request"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Upload Signature"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/menu/": {
      "get": {
        "operationId": "menu_list",
        "summary": "List Menu Menu",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Menu"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMenuList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "menu_create",
        "summary": "Create Menu Menu",
        "tags": [
          "Menu"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MenuRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MenuRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/menu/{id}/": {
      "get": {
        "operationId": "menu_retrieve",
        "summary": "Retrieve Menu Menu",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this menu.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Menu"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "menu_update",
        "summary": "Update Menu Menu",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this menu.",
            "required": true
          }
        ],
        "tags": [
          "Menu"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MenuRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MenuRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "menu_partial_update",
        "summary": "Partial Update Menu Menu",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this menu.",
            "required": true
          }
        ],
        "tags": [
          "Menu"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedMenuRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedMenuRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedMenuRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "menu_destroy",
        "summary": "Delete Menu Menu",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this menu.",
            "required": true
          }
        ],
        "tags": [
          "Menu"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/menu/meal_occurrence/": {
      "get": {
        "operationId": "menu_meal_occurrence_list",
        "summary": "List Menu MenuOccurrence",
        "parameters": [
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Menu"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMealOccurrenceList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/notifications/": {
      "get": {
        "operationId": "notifications_list",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Notification"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedNotificationSerializerUserReadOnlyList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "notifications_create",
        "tags": [
          "Notification"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSerializerCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSerializerCreateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSerializerCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSerializerCreate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/payment/": {
      "get": {
        "operationId": "payment_list",
        "summary": "List Payment Payment",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Payment"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPaymentList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "payment_create",
        "summary": "Create Payment Payment",
        "tags": [
          "Payment"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/payment/{id}/": {
      "get": {
        "operationId": "payment_retrieve",
        "summary": "Retrieve Payment Payment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this payment.",
            "required": true
          }
        ],
        "tags": [
          "Payment"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "payment_update",
        "summary": "Update Payment Payment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this payment.",
            "required": true
          }
        ],
        "tags": [
          "Payment"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "payment_partial_update",
        "summary": "Partial Update Payment Payment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this payment.",
            "required": true
          }
        ],
        "tags": [
          "Payment"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPaymentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPaymentRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPaymentRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "payment_destroy",
        "summary": "Delete Payment Payment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this payment.",
            "required": true
          }
        ],
        "tags": [
          "Payment"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/permissions/educator_permissions/": {
      "get": {
        "operationId": "permissions_educator_permissions_list",
        "summary": "List Permissions Educator",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Permissions"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEducatorKindergartenPermissionList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permissions/educator_permissions/{id}/": {
      "get": {
        "operationId": "permissions_educator_permissions_retrieve",
        "summary": "Retrieve Permissions Educator",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator kindergarten permission.",
            "required": true
          }
        ],
        "tags": [
          "Permissions"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorKindergartenPermission"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "permissions_educator_permissions_update",
        "summary": "Update Permissions Educator",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator kindergarten permission.",
            "required": true
          }
        ],
        "tags": [
          "Permissions"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EducatorKindergartenPermissionRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EducatorKindergartenPermissionRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EducatorKindergartenPermissionRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorKindergartenPermission"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "permissions_educator_permissions_partial_update",
        "summary": "Partial Update Permissions Educator",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this educator kindergarten permission.",
            "required": true
          }
        ],
        "tags": [
          "Permissions"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorKindergartenPermissionRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorKindergartenPermissionRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEducatorKindergartenPermissionRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorKindergartenPermission"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/presence/attendance/": {
      "get": {
        "operationId": "presence_attendance_list",
        "summary": "List Presence Attendance",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Presence"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPresenceList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "presence_attendance_create",
        "summary": "Create Presence Attendance",
        "tags": [
          "Presence"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PresenceRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PresenceRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PresenceRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Presence"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/presence/attendance/{id}/": {
      "get": {
        "operationId": "presence_attendance_retrieve",
        "summary": "Retrieve Presence Attendance",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this presence.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Presence"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Presence"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "presence_attendance_update",
        "summary": "Update Presence Attendance",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this presence.",
            "required": true
          }
        ],
        "tags": [
          "Presence"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PresenceRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PresenceRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PresenceRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Presence"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "presence_attendance_partial_update",
        "summary": "Partial Update Presence Attendance",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this presence.",
            "required": true
          }
        ],
        "tags": [
          "Presence"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPresenceRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPresenceRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPresenceRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Presence"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "presence_attendance_destroy",
        "summary": "Delete Presence Attendance",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this presence.",
            "required": true
          }
        ],
        "tags": [
          "Presence"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/presence/expected_pickup/": {
      "get": {
        "operationId": "presence_expected_pickup_list",
        "summary": "List Presence ExpectedPickUp",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Presence"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedExpectedPickUpList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "presence_expected_pickup_create",
        "summary": "Create Presence ExpectedPickUp",
        "tags": [
          "Presence"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ExpectedPickUpRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpectedPickUpRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ExpectedPickUpRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpectedPickUp"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/presence/expected_pickup/{id}/": {
      "get": {
        "operationId": "presence_expected_pickup_retrieve",
        "summary": "Retrieve Presence ExpectedPickUp",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this expected pick up.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Presence"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpectedPickUp"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "presence_expected_pickup_update",
        "summary": "Update Presence ExpectedPickUp",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this expected pick up.",
            "required": true
          }
        ],
        "tags": [
          "Presence"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ExpectedPickUpRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpectedPickUpRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ExpectedPickUpRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpectedPickUp"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "presence_expected_pickup_partial_update",
        "summary": "Partial Update Presence ExpectedPickUp",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this expected pick up.",
            "required": true
          }
        ],
        "tags": [
          "Presence"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedExpectedPickUpRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedExpectedPickUpRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedExpectedPickUpRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpectedPickUp"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "presence_expected_pickup_destroy",
        "summary": "Delete Presence ExpectedPickUp",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this expected pick up.",
            "required": true
          }
        ],
        "tags": [
          "Presence"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/publications/comments/": {
      "get": {
        "operationId": "publications_comments_list",
        "summary": "List Publications Comments",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Publications"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCommentList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "publications_comments_create",
        "summary": "Create Publications Comments",
        "tags": [
          "Publications"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/publications/comments/{id}/": {
      "get": {
        "operationId": "publications_comments_retrieve",
        "summary": "Retrieve Publications Comments",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this comment.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Publications"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "publications_comments_update",
        "summary": "Update Publications Comments",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this comment.",
            "required": true
          }
        ],
        "tags": [
          "Publications"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CommentSerializerUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentSerializerUpdateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CommentSerializerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentSerializerUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "publications_comments_partial_update",
        "summary": "Partial Update Publications Comments",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this comment.",
            "required": true
          }
        ],
        "tags": [
          "Publications"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCommentSerializerUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCommentSerializerUpdateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCommentSerializerUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentSerializerUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "publications_comments_destroy",
        "summary": "Delete Publications Comments",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this comment.",
            "required": true
          }
        ],
        "tags": [
          "Publications"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/publications/docs/content/": {
      "get": {
        "operationId": "publications_docs_content_list",
        "summary": "List Publications Document Only Publications",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Publications"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDocOnlyPublicationContentList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/publications/publications/": {
      "get": {
        "operationId": "publications_publications_list",
        "summary": "List Publications Publication",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Publications"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPublicationList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "publications_publications_create",
        "summary": "Create Publications Publication",
        "tags": [
          "Publications"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PublicationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicationRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PublicationRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/publications/publications/{id}/": {
      "get": {
        "operationId": "publications_publications_retrieve",
        "summary": "Retrieve Publications Publication",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this publication.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Publications"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "publications_publications_update",
        "summary": "Update Publications Publication",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this publication.",
            "required": true
          }
        ],
        "tags": [
          "Publications"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PublicationUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicationUpdateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PublicationUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "publications_publications_partial_update",
        "summary": "Partial Update Publications Publication",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this publication.",
            "required": true
          }
        ],
        "tags": [
          "Publications"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPublicationUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPublicationUpdateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPublicationUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "publications_publications_destroy",
        "summary": "Delete Publications Publication",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this publication.",
            "required": true
          }
        ],
        "tags": [
          "Publications"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/publications/qa_user_votes/": {
      "post": {
        "operationId": "publications_qa_user_votes_create",
        "summary": "Create Publications QA votes",
        "tags": [
          "Publications"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/QAUserVoteRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QAUserVoteRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/QAUserVoteRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QAUserVote"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/publications/qa_user_votes/{id}/": {
      "delete": {
        "operationId": "publications_qa_user_votes_destroy",
        "summary": "Delete Publications QA votes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this qa user vote.",
            "required": true
          }
        ],
        "tags": [
          "Publications"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/publications/reactions/comment_reactions/": {
      "post": {
        "operationId": "publications_reactions_comment_reactions_create",
        "summary": "Create Publications Comment Reactions",
        "tags": [
          "Publications"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CommentReactionRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentReactionRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CommentReactionRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentReaction"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/publications/reactions/comment_reactions/{id}/": {
      "delete": {
        "operationId": "publications_reactions_comment_reactions_destroy",
        "summary": "Delete Publications Comment Reactions",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this comment reaction.",
            "required": true
          }
        ],
        "tags": [
          "Publications"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/publications/reactions/publication_reactions/": {
      "post": {
        "operationId": "publications_reactions_publication_reactions_create",
        "summary": "Create Publications Publication Reactions",
        "tags": [
          "Publications"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PublicationReactionRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicationReactionRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PublicationReactionRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationReaction"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/publications/reactions/publication_reactions/{id}/": {
      "delete": {
        "operationId": "publications_reactions_publication_reactions_destroy",
        "summary": "Delete Publications Publication Reactions",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this publication reaction.",
            "required": true
          }
        ],
        "tags": [
          "Publications"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/search/kindergarten_members/": {
      "get": {
        "operationId": "search_kindergarten_members_list",
        "summary": "List Search Kindergarten members",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "The search query",
            "required": true
          }
        ],
        "tags": [
          "Search"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSearchKindergartenMembersList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/search_child/": {
      "get": {
        "operationId": "search_child_list",
        "summary": "List Whole Child Search",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Whole Child"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChildSearchList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/whole_child/": {
      "get": {
        "operationId": "whole_child_list",
        "summary": "List Whole Child Child",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Whole Child"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedWholeChildList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/whole_child/{id}/": {
      "get": {
        "operationId": "whole_child_retrieve",
        "summary": "Retrieve Whole Child Child",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this child.",
            "required": true
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields to include in the response."
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Expands."
          }
        ],
        "tags": [
          "Whole Child"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WholeChild"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/whole_child/history/{id}/": {
      "get": {
        "operationId": "whole_child_history_retrieve",
        "summary": "Retrieve Whole Child History logs",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this child.",
            "required": true
          }
        ],
        "tags": [
          "Whole Child"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WholeChildAuditLog"
                }
              }
            },
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Activity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "nullable": true,
            "maxLength": 512
          }
        },
        "required": [
          "description",
          "id",
          "name"
        ]
      },
      "ActivityRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "avatar": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 512
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "Actor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "user_type": {
            "type": "string",
            "title": "Type",
            "maxLength": 50
          }
        },
        "required": [
          "id",
          "name",
          "user_type"
        ]
      },
      "Address": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "street": {
            "type": "string",
            "maxLength": 80
          },
          "number": {
            "type": "string",
            "nullable": true,
            "maxLength": 10
          },
          "zip_code": {
            "type": "string",
            "title": "Zipcode",
            "maxLength": 10
          },
          "city": {
            "type": "string",
            "maxLength": 80
          },
          "province": {
            "type": "string",
            "maxLength": 80
          },
          "country": {
            "type": "string",
            "maxLength": 80
          }
        },
        "required": [
          "city",
          "country",
          "province",
          "street",
          "zip_code"
        ]
      },
      "AddressRequest": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "street": {
            "type": "string",
            "minLength": 1,
            "maxLength": 80
          },
          "number": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 10
          },
          "zip_code": {
            "type": "string",
            "minLength": 1,
            "title": "Zipcode",
            "maxLength": 10
          },
          "city": {
            "type": "string",
            "minLength": 1,
            "maxLength": 80
          },
          "province": {
            "type": "string",
            "minLength": 1,
            "maxLength": 80
          },
          "country": {
            "type": "string",
            "minLength": 1,
            "maxLength": 80
          }
        },
        "required": [
          "city",
          "country",
          "province",
          "street",
          "zip_code"
        ]
      },
      "ChatGroup": {
        "type": "object",
        "description": "Adds update nested feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMember"
            }
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "display_name": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "last_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessage"
              }
            ],
            "readOnly": true
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          }
        },
        "required": [
          "created_at",
          "display_name",
          "id",
          "last_message",
          "members"
        ]
      },
      "ChatGroupCreate": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMemberCreate"
            }
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "display_name": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          }
        },
        "required": [
          "created_at",
          "display_name",
          "id",
          "members"
        ]
      },
      "ChatGroupCreateRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMemberCreateRequest"
            }
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          }
        },
        "required": [
          "members"
        ]
      },
      "ChatGroupRequest": {
        "type": "object",
        "description": "Adds update nested feature",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMemberRequest"
            }
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          }
        },
        "required": [
          "members"
        ]
      },
      "ChatMember": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "user": {
            "type": "integer"
          },
          "removed": {
            "type": "boolean"
          },
          "notifications_enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "notifications_enabled",
          "user",
          "username"
        ]
      },
      "ChatMemberCreate": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "user": {
            "type": "integer"
          },
          "removed": {
            "type": "boolean",
            "readOnly": true
          },
          "notifications_enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "notifications_enabled",
          "removed",
          "user",
          "username"
        ]
      },
      "ChatMemberCreateRequest": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "user": {
            "type": "integer"
          }
        },
        "required": [
          "user"
        ]
      },
      "ChatMemberRequest": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "user": {
            "type": "integer"
          },
          "removed": {
            "type": "boolean"
          }
        },
        "required": [
          "user"
        ]
      },
      "ChatMessage": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "member": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ChatMember"
              },
              {
                "type": "integer"
              }
            ]
          },
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "group": {
            "type": "integer",
            "nullable": true
          },
          "seen_by": {
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChatMember"
                }
              },
              {
                "type": "integer"
              }
            ]
          },
          "files": {
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/_ChatMessageFile"
                }
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "content",
          "created_at",
          "files",
          "id",
          "member",
          "seen_by"
        ]
      },
      "ChatMessageFile": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "file": {
            "$ref": "#/components/schemas/File"
          },
          "message": {
            "readOnly": true,
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ChatMessage"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "file",
          "id",
          "message"
        ]
      },
      "ChatMessageFileRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/File"
          }
        },
        "required": [
          "file"
        ]
      },
      "ChatMessageRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "member": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ChatMemberRequest"
              },
              {
                "type": "integer"
              }
            ]
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "group": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "content",
          "member"
        ]
      },
      "Child": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "family": {
            "type": "integer"
          },
          "first_name": {
            "type": "string",
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "maxLength": 100
          },
          "birth_date": {
            "type": "string",
            "format": "date-time"
          },
          "sex": {
            "$ref": "#/components/schemas/SexEnum"
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "medical_file": {
            "$ref": "#/components/schemas/ChildMedicalFile"
          }
        },
        "required": [
          "birth_date",
          "deleted",
          "family",
          "first_name",
          "id",
          "last_name",
          "medical_file",
          "sex"
        ]
      },
      "ChildInfoFieldRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "sub_fields": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          }
        },
        "required": [
          "name",
          "sub_fields"
        ]
      },
      "ChildMedicalFile": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "medications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildMedicalFileMedication"
            }
          },
          "allergies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildMedicalFileAllergy"
            }
          },
          "medical_conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildMedicalFileMedicalCondition"
            }
          }
        },
        "required": [
          "allergies",
          "medical_conditions",
          "medications"
        ]
      },
      "ChildMedicalFileAllergy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "type": "string",
            "nullable": true,
            "maxLength": 128
          },
          "severity": {
            "$ref": "#/components/schemas/SeverityEnum"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "severity"
        ]
      },
      "ChildMedicalFileAllergyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "type": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 128
          },
          "severity": {
            "$ref": "#/components/schemas/SeverityEnum"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "comments": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          }
        },
        "required": [
          "name",
          "severity"
        ]
      },
      "ChildMedicalFileMedicalCondition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "severity": {
            "$ref": "#/components/schemas/SeverityEnum"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "severity"
        ]
      },
      "ChildMedicalFileMedicalConditionRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "severity": {
            "$ref": "#/components/schemas/SeverityEnum"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "comments": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          }
        },
        "required": [
          "name",
          "severity"
        ]
      },
      "ChildMedicalFileMedication": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "type": "string",
            "nullable": true,
            "maxLength": 128
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ChildMedicalFileMedicationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "type": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 128
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "comments": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          }
        },
        "required": [
          "name"
        ]
      },
      "ChildMedicalFileRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "medications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildMedicalFileMedicationRequest"
            }
          },
          "allergies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildMedicalFileAllergyRequest"
            }
          },
          "medical_conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildMedicalFileMedicalConditionRequest"
            }
          }
        },
        "required": [
          "allergies",
          "medical_conditions",
          "medications"
        ]
      },
      "ChildNotes": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "child": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "actor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Actor"
              }
            ],
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "actor",
          "child",
          "description",
          "id",
          "timestamp"
        ]
      },
      "ChildRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "family": {
            "type": "integer"
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "birth_date": {
            "type": "string",
            "format": "date-time"
          },
          "sex": {
            "$ref": "#/components/schemas/SexEnum"
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "medical_file": {
            "$ref": "#/components/schemas/ChildMedicalFileRequest"
          }
        },
        "required": [
          "birth_date",
          "family",
          "first_name",
          "last_name",
          "medical_file",
          "sex"
        ]
      },
      "ChildSearch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "maxLength": 100
          },
          "sex": {
            "$ref": "#/components/schemas/SexEnum"
          },
          "birth_date": {
            "type": "string",
            "format": "date-time"
          },
          "parent1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ParentSearch"
              }
            ],
            "readOnly": true
          },
          "parent2": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ParentSearch"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "birth_date",
          "first_name",
          "id",
          "last_name",
          "parent1",
          "parent2",
          "sex"
        ]
      },
      "Comment": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "user": {
            "type": "integer",
            "readOnly": true
          },
          "publication": {
            "type": "integer"
          },
          "parent_comment": {
            "type": "integer",
            "nullable": true
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "content": {
            "type": "string"
          },
          "tag_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagUser"
            }
          },
          "tag_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagGroup"
            }
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentReaction"
            },
            "readOnly": true
          },
          "deleted": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "content",
          "date_created",
          "date_modified",
          "deleted",
          "id",
          "publication",
          "reactions",
          "user"
        ]
      },
      "CommentReaction": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "user": {
            "type": "integer",
            "readOnly": true
          },
          "comment": {
            "type": "integer"
          },
          "reaction": {
            "$ref": "#/components/schemas/ReactionEnum"
          }
        },
        "required": [
          "comment",
          "id",
          "reaction",
          "user"
        ]
      },
      "CommentReactionRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "comment": {
            "type": "integer"
          },
          "reaction": {
            "$ref": "#/components/schemas/ReactionEnum"
          }
        },
        "required": [
          "comment",
          "reaction"
        ]
      },
      "CommentRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "publication": {
            "type": "integer"
          },
          "parent_comment": {
            "type": "integer",
            "nullable": true
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "tag_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagUserRequest"
            }
          },
          "tag_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagGroupRequest"
            }
          }
        },
        "required": [
          "content",
          "publication"
        ]
      },
      "CommentSerializerUpdate": {
        "type": "object",
        "description": "Adds update nested feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "user": {
            "type": "integer",
            "readOnly": true
          },
          "publication": {
            "type": "integer",
            "readOnly": true
          },
          "parent_comment": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "content": {
            "type": "string"
          },
          "tag_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagUser"
            }
          },
          "tag_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagGroup"
            }
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentReaction"
            },
            "readOnly": true
          },
          "deleted": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "content",
          "date_created",
          "date_modified",
          "deleted",
          "id",
          "parent_comment",
          "publication",
          "reactions",
          "user"
        ]
      },
      "CommentSerializerUpdateRequest": {
        "type": "object",
        "description": "Adds update nested feature",
        "properties": {
          "content": {
            "type": "string",
            "minLength": 1
          },
          "tag_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagUserRequest"
            }
          },
          "tag_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagGroupRequest"
            }
          }
        },
        "required": [
          "content"
        ]
      },
      "CurrentChatMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "notifications_enabled": {
            "type": "boolean"
          },
          "removed": {
            "type": "boolean"
          }
        },
        "required": [
          "id"
        ]
      },
      "CurrentChatMemberRequest": {
        "type": "object",
        "properties": {
          "notifications_enabled": {
            "type": "boolean"
          },
          "removed": {
            "type": "boolean"
          }
        }
      },
      "DaySummary": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Activity"
            }
          },
          "humor": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "humor_note": {
            "type": "string"
          },
          "hunger": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "hunger_note": {
            "type": "string"
          },
          "activity_participation": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "activity_participation_note": {
            "type": "string"
          },
          "nap": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "nap_note": {
            "type": "string"
          },
          "interactions": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "interactions_note": {
            "type": "string"
          },
          "outside_playtime": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "outside_playtime_note": {
            "type": "string"
          },
          "pooping": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "pooping_note": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "note": {
            "type": "string"
          },
          "child": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Child"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "activities",
          "activity_participation",
          "activity_participation_note",
          "child",
          "date",
          "humor",
          "humor_note",
          "hunger",
          "hunger_note",
          "id",
          "interactions",
          "interactions_note",
          "nap",
          "nap_note",
          "note",
          "outside_playtime",
          "outside_playtime_note",
          "pooping",
          "pooping_note"
        ]
      },
      "DaySummaryPublicationContent": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_Question"
            }
          }
        },
        "required": [
          "content",
          "questions"
        ]
      },
      "DaySummaryRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityRequest"
            }
          },
          "humor": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "humor_note": {
            "type": "string",
            "minLength": 1
          },
          "hunger": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "hunger_note": {
            "type": "string",
            "minLength": 1
          },
          "activity_participation": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "activity_participation_note": {
            "type": "string",
            "minLength": 1
          },
          "nap": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "nap_note": {
            "type": "string",
            "minLength": 1
          },
          "interactions": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "interactions_note": {
            "type": "string",
            "minLength": 1
          },
          "outside_playtime": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "outside_playtime_note": {
            "type": "string",
            "minLength": 1
          },
          "pooping": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "pooping_note": {
            "type": "string",
            "minLength": 1
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "note": {
            "type": "string",
            "minLength": 1
          },
          "child": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ChildRequest"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "activities",
          "activity_participation",
          "activity_participation_note",
          "child",
          "date",
          "humor",
          "humor_note",
          "hunger",
          "hunger_note",
          "interactions",
          "interactions_note",
          "nap",
          "nap_note",
          "note",
          "outside_playtime",
          "outside_playtime_note",
          "pooping",
          "pooping_note"
        ]
      },
      "DeclinedReasonEnum": {
        "enum": [
          "NSF",
          "STR",
          "ED",
          "FNC",
          "AC",
          "INAC",
          "ANF",
          "AF",
          "AR",
          "NDA",
          "NULL"
        ],
        "type": "string",
        "description": "* `NSF` - Non sufficient fund\n* `STR` - Stopped recalled\n* `ED` - Edit reject\n* `FNC` - Funds not cleared\n* `AC` - Account closed\n* `INAC` - Invalid account no\n* `ANF` - Account not found\n* `AF` - Account frozen\n* `AR` - Account revoked\n* `NDA` - No debit allowed\n* `NULL` - null"
      },
      "DocOnlyPublicationContent": {
        "type": "object",
        "properties": {
          "post_content": {
            "$ref": "#/components/schemas/PostPublicationContent"
          },
          "incident_content": {
            "$ref": "#/components/schemas/IncidentPublicationContent"
          },
          "poll_content": {
            "$ref": "#/components/schemas/PollPublicationContent"
          },
          "day_summary_content": {
            "$ref": "#/components/schemas/DaySummaryPublicationContent"
          }
        },
        "required": [
          "day_summary_content",
          "incident_content",
          "poll_content",
          "post_content"
        ]
      },
      "DocumentsFicheContactsRequest": {
        "type": "object",
        "properties": {
          "all_children": {
            "type": "boolean",
            "default": false
          },
          "all_time": {
            "type": "boolean",
            "default": false
          },
          "children": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Educator": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "is_email_verified": {
            "type": "boolean",
            "readOnly": true
          },
          "educatorprofile": {
            "readOnly": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EducatorProfile"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "educatorprofile",
          "email",
          "id",
          "is_email_verified"
        ]
      },
      "EducatorAvailability": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "educator_id": {
            "type": "integer"
          },
          "educator_infos": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EducatorProfile"
              }
            ],
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          }
        },
        "required": [
          "date",
          "educator_id",
          "educator_infos",
          "end_time",
          "id",
          "start_time"
        ]
      },
      "EducatorAvailabilityRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "educator_id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          }
        },
        "required": [
          "date",
          "educator_id",
          "end_time",
          "start_time"
        ]
      },
      "EducatorExperienceLevelSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "title": {
            "type": "string"
          },
          "min_number": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          }
        },
        "required": [
          "id",
          "min_number",
          "title"
        ]
      },
      "EducatorExperienceLevelSettingsRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1
          },
          "min_number": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          }
        },
        "required": [
          "min_number",
          "title"
        ]
      },
      "EducatorKindergartenPermission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "menu": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "calendar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "educator_contracts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "payments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "presence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "day_evaluation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "groups": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "fast_pickup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "child_development_profile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "posting": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "chat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "inscriptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "parents_family_profile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "educator_profile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "medical_file_form": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "kindergarten": {
            "type": "integer",
            "readOnly": true
          },
          "educator": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "educator",
          "id",
          "kindergarten"
        ]
      },
      "EducatorKindergartenPermissionRequest": {
        "type": "object",
        "properties": {
          "menu": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "calendar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "educator_contracts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "payments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "presence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "day_evaluation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "groups": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "fast_pickup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "child_development_profile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "posting": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "chat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "inscriptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "parents_family_profile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "educator_profile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "medical_file_form": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          }
        }
      },
      "EducatorProfile": {
        "type": "object",
        "description": "Adds update nested feature",
        "properties": {
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "maxLength": 20
          },
          "last_name": {
            "type": "string",
            "maxLength": 20
          }
        },
        "required": [
          "first_name",
          "last_name"
        ]
      },
      "EducatorProfileRequest": {
        "type": "object",
        "description": "Adds update nested feature",
        "properties": {
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          }
        },
        "required": [
          "id"
        ]
      },
      "EducatorRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1,
            "title": "Email address",
            "maxLength": 254
          },
          "password1": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          },
          "password2": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          }
        },
        "required": [
          "email",
          "password1",
          "password2"
        ]
      },
      "EducatorSchedule": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "educator_id": {
            "type": "integer"
          },
          "educator_infos": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EducatorProfile"
              }
            ],
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          }
        },
        "required": [
          "date",
          "educator_id",
          "educator_infos",
          "end_time",
          "id",
          "start_time"
        ]
      },
      "EducatorScheduleRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "educator_id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          }
        },
        "required": [
          "date",
          "educator_id",
          "end_time",
          "start_time"
        ]
      },
      "EducatorTimeSheet": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "educator_id": {
            "type": "integer"
          },
          "educator_infos": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EducatorProfile"
              }
            ],
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          },
          "photo": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "date",
          "educator_id",
          "educator_infos",
          "end_time",
          "id",
          "photo",
          "start_time"
        ]
      },
      "EducatorTimeSheetRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "educator_id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          },
          "photo": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "date",
          "educator_id",
          "end_time",
          "photo",
          "start_time"
        ]
      },
      "Event": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "repeat_until": {
            "type": "string",
            "format": "date-time"
          },
          "recurrence": {
            "$ref": "#/components/schemas/RecurrenceEnum"
          },
          "visible_by_parents": {
            "type": "boolean"
          },
          "files": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileCollection"
              }
            ],
            "nullable": true
          },
          "invited_users": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "user_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventUserTag"
            }
          }
        },
        "required": [
          "content",
          "end",
          "id",
          "recurrence",
          "repeat_until",
          "start",
          "title",
          "user_tags",
          "visible_by_parents"
        ]
      },
      "EventOccurrence": {
        "type": "object",
        "properties": {
          "occurrence_start": {
            "type": "string",
            "format": "date-time"
          },
          "occurrence_end": {
            "type": "string",
            "format": "date-time"
          },
          "event": {
            "$ref": "#/components/schemas/Event"
          }
        },
        "required": [
          "event",
          "occurrence_end",
          "occurrence_start"
        ]
      },
      "EventRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "repeat_until": {
            "type": "string",
            "format": "date-time"
          },
          "recurrence": {
            "$ref": "#/components/schemas/RecurrenceEnum"
          },
          "visible_by_parents": {
            "type": "boolean"
          },
          "files": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileCollection"
              }
            ],
            "nullable": true
          },
          "invited_users": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "title": {
            "type": "string",
            "minLength": 1
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "user_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventUserTagRequest"
            }
          }
        },
        "required": [
          "content",
          "end",
          "recurrence",
          "repeat_until",
          "start",
          "title",
          "user_tags",
          "visible_by_parents"
        ]
      },
      "EventUserTag": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "user": {
            "type": "integer"
          }
        },
        "required": [
          "user"
        ]
      },
      "EventUserTagRequest": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "user": {
            "type": "integer"
          }
        },
        "required": [
          "user"
        ]
      },
      "ExpectedPickUp": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          },
          "clock_in": {
            "type": "boolean"
          },
          "clock_out": {
            "type": "boolean"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Child"
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parent"
            }
          },
          "trusted_persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrustedPerson"
            }
          },
          "temporary_trusted_persons": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_TemporaryTrustedPerson"
              }
            ],
            "nullable": true
          }
        },
        "required": [
          "children",
          "clock_in",
          "clock_out",
          "end_date",
          "id",
          "parents",
          "start_date",
          "temporary_trusted_persons",
          "trusted_persons"
        ]
      },
      "ExpectedPickUpRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          },
          "clock_in": {
            "type": "boolean"
          },
          "clock_out": {
            "type": "boolean"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildRequest"
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentRequest"
            }
          },
          "trusted_persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrustedPersonRequest"
            }
          },
          "temporary_trusted_persons": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_TemporaryTrustedPersonRequest"
              }
            ],
            "nullable": true
          }
        },
        "required": [
          "children",
          "clock_in",
          "clock_out",
          "end_date",
          "parents",
          "start_date",
          "temporary_trusted_persons",
          "trusted_persons"
        ]
      },
      "File": {
        "title": "File",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "file": {
            "title": "File",
            "type": "string"
          },
          "file_type": {
            "$ref": "#/components/schemas/FileTypes"
          }
        },
        "required": [
          "name",
          "file",
          "file_type"
        ]
      },
      "FileCollection": {
        "title": "FileCollection",
        "type": "object",
        "properties": {
          "files": {
            "title": "Files",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          }
        },
        "required": [
          "files"
        ]
      },
      "GeneralEducatorTimeSheetSettings": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "breaks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_EducatorBreakSettings"
            }
          },
          "working_hours_start": {
            "type": "string",
            "format": "time"
          },
          "working_hours_end": {
            "type": "string",
            "format": "time"
          },
          "working_day_monday": {
            "type": "boolean"
          },
          "working_day_tuesday": {
            "type": "boolean"
          },
          "working_day_wednesday": {
            "type": "boolean"
          },
          "working_day_thursday": {
            "type": "boolean"
          },
          "working_day_friday": {
            "type": "boolean"
          },
          "working_day_saturday": {
            "type": "boolean"
          },
          "working_day_sunday": {
            "type": "boolean"
          },
          "maximum_hours_awarded": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "min_shift_length": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "max_shift_length": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          }
        },
        "required": [
          "breaks",
          "id",
          "max_shift_length",
          "maximum_hours_awarded",
          "min_shift_length",
          "working_day_friday",
          "working_day_monday",
          "working_day_saturday",
          "working_day_sunday",
          "working_day_thursday",
          "working_day_tuesday",
          "working_day_wednesday",
          "working_hours_end",
          "working_hours_start"
        ]
      },
      "GeneralEducatorTimeSheetSettingsRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "breaks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_EducatorBreakSettingsRequest"
            }
          },
          "working_hours_start": {
            "type": "string",
            "format": "time"
          },
          "working_hours_end": {
            "type": "string",
            "format": "time"
          },
          "working_day_monday": {
            "type": "boolean"
          },
          "working_day_tuesday": {
            "type": "boolean"
          },
          "working_day_wednesday": {
            "type": "boolean"
          },
          "working_day_thursday": {
            "type": "boolean"
          },
          "working_day_friday": {
            "type": "boolean"
          },
          "working_day_saturday": {
            "type": "boolean"
          },
          "working_day_sunday": {
            "type": "boolean"
          },
          "maximum_hours_awarded": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "min_shift_length": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "max_shift_length": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          }
        },
        "required": [
          "breaks",
          "max_shift_length",
          "maximum_hours_awarded",
          "min_shift_length",
          "working_day_friday",
          "working_day_monday",
          "working_day_saturday",
          "working_day_sunday",
          "working_day_thursday",
          "working_day_tuesday",
          "working_day_wednesday",
          "working_hours_end",
          "working_hours_start"
        ]
      },
      "Group": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "educators": {
            "items": {
              "type": "integer"
            },
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Educator"
                }
              },
              {
                "type": "integer"
              }
            ]
          },
          "children": {
            "items": {
              "type": "integer"
            },
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Child"
                }
              },
              {
                "type": "integer"
              }
            ]
          },
          "capacity": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "maxLength": 18
          }
        },
        "required": [
          "capacity",
          "children",
          "educators",
          "id",
          "name"
        ]
      },
      "GroupRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "educators": {
            "items": {
              "type": "integer"
            },
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EducatorRequest"
                }
              },
              {
                "type": "integer"
              }
            ]
          },
          "children": {
            "items": {
              "type": "integer"
            },
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChildRequest"
                }
              },
              {
                "type": "integer"
              }
            ]
          },
          "capacity": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "color": {
            "type": "string",
            "minLength": 1,
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "maxLength": 18
          }
        },
        "required": [
          "capacity",
          "children",
          "educators",
          "name"
        ]
      },
      "IncidentPublicationContent": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ]
      },
      "IndividualEmployeeTimeSheetSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "experience_level": {
            "$ref": "#/components/schemas/EducatorExperienceLevelSettings"
          },
          "min_nb_hours_per_week": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "max_nb_hours_per_week": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "code": {
            "type": "string",
            "maxLength": 6
          },
          "educator": {
            "type": "integer"
          }
        },
        "required": [
          "educator",
          "experience_level",
          "id",
          "max_nb_hours_per_week",
          "min_nb_hours_per_week"
        ]
      },
      "IndividualEmployeeTimeSheetSettingsRequest": {
        "type": "object",
        "properties": {
          "experience_level": {
            "$ref": "#/components/schemas/EducatorExperienceLevelSettingsRequest"
          },
          "min_nb_hours_per_week": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "max_nb_hours_per_week": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 6
          },
          "educator": {
            "type": "integer"
          }
        },
        "required": [
          "educator",
          "experience_level",
          "max_nb_hours_per_week",
          "min_nb_hours_per_week"
        ]
      },
      "KindEnum": {
        "enum": [
          "LANDLINE",
          "CELLPHONE"
        ],
        "type": "string",
        "description": "* `LANDLINE` - LANDLINE\n* `CELLPHONE` - CELLPHONE"
      },
      "LinkEnum": {
        "enum": [
          "FRIEND",
          "GRAND_PARENT",
          "BROTHER",
          "UNCLE",
          "DIVORCED_PARENT",
          "OTHER"
        ],
        "type": "string",
        "description": "* `FRIEND` - Friend\n* `GRAND_PARENT` - Grand Parent\n* `BROTHER` - Brother\n* `UNCLE` - Uncle\n* `DIVORCED_PARENT` - Divorced Parent\n* `OTHER` - Other"
      },
      "LogEntry": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "readOnly": true
          },
          "changes": {
            "type": "string",
            "title": "Change message"
          },
          "remote_addr": {
            "type": "string",
            "nullable": true,
            "title": "Remote address"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "actor": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "action",
          "timestamp"
        ]
      },
      "Meal": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_MealItem"
            }
          }
        },
        "required": [
          "end_time",
          "id",
          "items",
          "name",
          "start_time"
        ]
      },
      "MealOccurrence": {
        "type": "object",
        "properties": {
          "occurrence_date": {
            "type": "string",
            "format": "date"
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          },
          "meal_name": {
            "type": "string"
          },
          "menu_id": {
            "type": "integer"
          },
          "meal_id": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_MealItem"
            }
          }
        },
        "required": [
          "end_time",
          "items",
          "meal_id",
          "meal_name",
          "menu_id",
          "occurrence_date",
          "start_time"
        ]
      },
      "MealRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_MealItemRequest"
            }
          }
        },
        "required": [
          "end_time",
          "items",
          "name",
          "start_time"
        ]
      },
      "MedicalFileFormEnum": {
        "enum": [
          1,
          3,
          5,
          9,
          17,
          31,
          2,
          6,
          10,
          18,
          30,
          4,
          12,
          20,
          8,
          24,
          16
        ],
        "type": "integer",
        "description": "* `1` - 1 | 1\n* `3` - 2 | 1\n* `5` - 4 | 1\n* `9` - 8 | 1\n* `17` - 16 | 1\n* `31` - 30 | 1\n* `2` - 2 | 2\n* `6` - 4 | 2\n* `10` - 8 | 2\n* `18` - 16 | 2\n* `30` - 30 | 30\n* `4` - 4 | 4\n* `12` - 8 | 4\n* `20` - 16 | 4\n* `8` - 8 | 8\n* `24` - 16 | 8\n* `16` - 16 | 16"
      },
      "Menu": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuGroup"
            },
            "readOnly": true
          },
          "description": {
            "type": "string"
          },
          "cycle": {
            "type": "string"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          },
          "repeat_until": {
            "type": "string",
            "format": "date"
          },
          "meals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Meal"
            }
          }
        },
        "required": [
          "cycle",
          "description",
          "end_date",
          "groups",
          "id",
          "meals",
          "name",
          "repeat_until",
          "start_date"
        ]
      },
      "MenuGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "color": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "maxLength": 18
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "MenuGroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "color": {
            "type": "string",
            "minLength": 1,
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "maxLength": 18
          }
        },
        "required": [
          "name"
        ]
      },
      "MenuRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "cycle": {
            "type": "string",
            "minLength": 1
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          },
          "repeat_until": {
            "type": "string",
            "format": "date"
          },
          "meals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MealRequest"
            }
          }
        },
        "required": [
          "cycle",
          "description",
          "end_date",
          "meals",
          "name",
          "repeat_until",
          "start_date"
        ]
      },
      "NTypeEnum": {
        "enum": [
          "CHAT",
          "COMMENT",
          "PUBLICATION",
          "CUSTOM"
        ],
        "type": "string",
        "description": "* `CHAT` - CHAT\n* `COMMENT` - COMMENT\n* `PUBLICATION` - PUBLICATION\n* `CUSTOM` - CUSTOM"
      },
      "Nested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "phone": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "birth_date": {
            "type": "string",
            "format": "date-time"
          },
          "first_name": {
            "type": "string",
            "maxLength": 20
          },
          "last_name": {
            "type": "string",
            "maxLength": 20
          },
          "sex": {
            "$ref": "#/components/schemas/SexEnum"
          },
          "date_joined": {
            "type": "string",
            "format": "date-time"
          },
          "polymorphic_ctype": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "user": {
            "type": "integer"
          }
        },
        "required": [
          "birth_date",
          "first_name",
          "id",
          "last_name",
          "polymorphic_ctype",
          "sex",
          "user"
        ]
      },
      "NestedRequest": {
        "type": "object",
        "properties": {
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "phone": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "birth_date": {
            "type": "string",
            "format": "date-time"
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "sex": {
            "$ref": "#/components/schemas/SexEnum"
          },
          "date_joined": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "type": "integer"
          }
        },
        "required": [
          "birth_date",
          "first_name",
          "last_name",
          "sex",
          "user"
        ]
      },
      "NotificationSerializerCreate": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "message": {
            "type": "string"
          },
          "subject": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "message",
          "subject",
          "users"
        ]
      },
      "NotificationSerializerCreateRequest": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "message": {
            "type": "string",
            "minLength": 1
          },
          "subject": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "message",
          "subject",
          "users"
        ]
      },
      "NotificationSerializerUserReadOnly": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "subject": {
            "type": "string",
            "maxLength": 255
          },
          "message": {
            "type": "string"
          },
          "n_type": {
            "$ref": "#/components/schemas/NTypeEnum"
          },
          "optional_data": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "user": {
            "type": "integer"
          },
          "created_by": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "created",
          "id",
          "message",
          "n_type",
          "subject",
          "user"
        ]
      },
      "NullEnum": {
        "enum": [
          null
        ]
      },
      "OutsidePlaytimeEnum": {
        "enum": [
          "BAD",
          "MEDIUM",
          "GOOD",
          "AWESOME"
        ],
        "type": "string",
        "description": "* `BAD` - Bad\n* `MEDIUM` - Medium\n* `GOOD` - Good\n* `AWESOME` - Awesome"
      },
      "PaginatedChatGroupList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatGroup"
            }
          }
        }
      },
      "PaginatedChatMessageFileList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessageFile"
            }
          }
        }
      },
      "PaginatedChatMessageList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            }
          }
        }
      },
      "PaginatedChildSearchList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildSearch"
            }
          }
        }
      },
      "PaginatedCommentList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
      },
      "PaginatedDaySummaryList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DaySummary"
            }
          }
        }
      },
      "PaginatedDocOnlyPublicationContentList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocOnlyPublicationContent"
            }
          }
        }
      },
      "PaginatedEducatorAvailabilityList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EducatorAvailability"
            }
          }
        }
      },
      "PaginatedEducatorExperienceLevelSettingsList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EducatorExperienceLevelSettings"
            }
          }
        }
      },
      "PaginatedEducatorKindergartenPermissionList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EducatorKindergartenPermission"
            }
          }
        }
      },
      "PaginatedEducatorScheduleList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EducatorSchedule"
            }
          }
        }
      },
      "PaginatedEducatorTimeSheetList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EducatorTimeSheet"
            }
          }
        }
      },
      "PaginatedEventList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        }
      },
      "PaginatedEventOccurrenceList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventOccurrence"
            }
          }
        }
      },
      "PaginatedExpectedPickUpList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpectedPickUp"
            }
          }
        }
      },
      "PaginatedGeneralEducatorTimeSheetSettingsList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralEducatorTimeSheetSettings"
            }
          }
        }
      },
      "PaginatedGroupList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          }
        }
      },
      "PaginatedIndividualEmployeeTimeSheetSettingsList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndividualEmployeeTimeSheetSettings"
            }
          }
        }
      },
      "PaginatedMealOccurrenceList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MealOccurrence"
            }
          }
        }
      },
      "PaginatedMenuList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Menu"
            }
          }
        }
      },
      "PaginatedNotificationSerializerUserReadOnlyList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationSerializerUserReadOnly"
            }
          }
        }
      },
      "PaginatedPaymentList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        }
      },
      "PaginatedPresenceList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Presence"
            }
          }
        }
      },
      "PaginatedPublicationList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Publication"
            }
          }
        }
      },
      "PaginatedSearchKindergartenMembersList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchKindergartenMembers"
            }
          }
        }
      },
      "PaginatedSharedLinkList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedLink"
            }
          }
        }
      },
      "PaginatedWholeChildList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WholeChild"
            }
          }
        }
      },
      "Parent": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "is_email_verified": {
            "type": "boolean",
            "readOnly": true
          },
          "parentprofile": {
            "readOnly": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ParentProfile"
              },
              {
                "type": "integer"
              }
            ]
          },
          "signature": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "email",
          "id",
          "is_email_verified",
          "parentprofile"
        ]
      },
      "ParentProfile": {
        "type": "object",
        "description": "Adds update nested feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "user": {
            "$ref": "#/components/schemas/Parent"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "family_id": {
            "type": "string",
            "readOnly": true
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "birth_date": {
            "type": "string",
            "format": "date-time"
          },
          "first_name": {
            "type": "string",
            "maxLength": 20
          },
          "last_name": {
            "type": "string",
            "maxLength": 20
          },
          "sex": {
            "$ref": "#/components/schemas/SexEnum"
          },
          "date_joined": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "address",
          "birth_date",
          "family_id",
          "first_name",
          "id",
          "last_name",
          "phone",
          "sex",
          "user"
        ]
      },
      "ParentProfileRequest": {
        "type": "object",
        "description": "Adds update nested feature",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/ParentRequest"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneRequest"
          },
          "address": {
            "$ref": "#/components/schemas/AddressRequest"
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "birth_date": {
            "type": "string",
            "format": "date-time"
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "sex": {
            "$ref": "#/components/schemas/SexEnum"
          },
          "date_joined": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "address",
          "birth_date",
          "first_name",
          "last_name",
          "phone",
          "sex",
          "user"
        ]
      },
      "ParentRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1,
            "title": "Email address",
            "maxLength": 254
          },
          "password1": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          },
          "password2": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          },
          "signature": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "email",
          "password1",
          "password2"
        ]
      },
      "ParentSearch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "readOnly": true
          },
          "sex": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SexEnum"
              }
            ],
            "readOnly": true
          },
          "last_name": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "first_name",
          "id",
          "last_name",
          "sex"
        ]
      },
      "PatchedChatGroupRequest": {
        "type": "object",
        "description": "Adds update nested feature",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMemberRequest"
            }
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          }
        }
      },
      "PatchedCommentSerializerUpdateRequest": {
        "type": "object",
        "description": "Adds update nested feature",
        "properties": {
          "content": {
            "type": "string",
            "minLength": 1
          },
          "tag_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagUserRequest"
            }
          },
          "tag_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagGroupRequest"
            }
          }
        }
      },
      "PatchedCurrentChatMemberRequest": {
        "type": "object",
        "properties": {
          "notifications_enabled": {
            "type": "boolean"
          },
          "removed": {
            "type": "boolean"
          }
        }
      },
      "PatchedDaySummaryRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityRequest"
            }
          },
          "humor": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "humor_note": {
            "type": "string",
            "minLength": 1
          },
          "hunger": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "hunger_note": {
            "type": "string",
            "minLength": 1
          },
          "activity_participation": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "activity_participation_note": {
            "type": "string",
            "minLength": 1
          },
          "nap": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "nap_note": {
            "type": "string",
            "minLength": 1
          },
          "interactions": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "interactions_note": {
            "type": "string",
            "minLength": 1
          },
          "outside_playtime": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "outside_playtime_note": {
            "type": "string",
            "minLength": 1
          },
          "pooping": {
            "$ref": "#/components/schemas/OutsidePlaytimeEnum"
          },
          "pooping_note": {
            "type": "string",
            "minLength": 1
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "note": {
            "type": "string",
            "minLength": 1
          },
          "child": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ChildRequest"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "PatchedEducatorAvailabilityRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "educator_id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          }
        },
        "required": [
          "id"
        ]
      },
      "PatchedEducatorExperienceLevelSettingsRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1
          },
          "min_number": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          }
        }
      },
      "PatchedEducatorKindergartenPermissionRequest": {
        "type": "object",
        "properties": {
          "menu": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "calendar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "educator_contracts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "payments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "presence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "day_evaluation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "groups": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "fast_pickup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "child_development_profile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "posting": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "chat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "inscriptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "parents_family_profile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "educator_profile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          },
          "medical_file_form": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MedicalFileFormEnum"
              }
            ],
            "minimum": 0,
            "maximum": 32767
          }
        }
      },
      "PatchedEducatorScheduleRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "educator_id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          }
        },
        "required": [
          "id"
        ]
      },
      "PatchedEducatorTimeSheetRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "educator_id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          },
          "photo": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "id"
        ]
      },
      "PatchedEventRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "repeat_until": {
            "type": "string",
            "format": "date-time"
          },
          "recurrence": {
            "$ref": "#/components/schemas/RecurrenceEnum"
          },
          "visible_by_parents": {
            "type": "boolean"
          },
          "files": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileCollection"
              }
            ],
            "nullable": true
          },
          "invited_users": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "title": {
            "type": "string",
            "minLength": 1
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "user_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventUserTagRequest"
            }
          }
        }
      },
      "PatchedExpectedPickUpRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          },
          "clock_in": {
            "type": "boolean"
          },
          "clock_out": {
            "type": "boolean"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildRequest"
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentRequest"
            }
          },
          "trusted_persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrustedPersonRequest"
            }
          },
          "temporary_trusted_persons": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_TemporaryTrustedPersonRequest"
              }
            ],
            "nullable": true
          }
        }
      },
      "PatchedGeneralEducatorTimeSheetSettingsRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "breaks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_EducatorBreakSettingsRequest"
            }
          },
          "working_hours_start": {
            "type": "string",
            "format": "time"
          },
          "working_hours_end": {
            "type": "string",
            "format": "time"
          },
          "working_day_monday": {
            "type": "boolean"
          },
          "working_day_tuesday": {
            "type": "boolean"
          },
          "working_day_wednesday": {
            "type": "boolean"
          },
          "working_day_thursday": {
            "type": "boolean"
          },
          "working_day_friday": {
            "type": "boolean"
          },
          "working_day_saturday": {
            "type": "boolean"
          },
          "working_day_sunday": {
            "type": "boolean"
          },
          "maximum_hours_awarded": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "min_shift_length": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "max_shift_length": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          }
        }
      },
      "PatchedGroupRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "educators": {
            "items": {
              "type": "integer"
            },
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EducatorRequest"
                }
              },
              {
                "type": "integer"
              }
            ]
          },
          "children": {
            "items": {
              "type": "integer"
            },
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChildRequest"
                }
              },
              {
                "type": "integer"
              }
            ]
          },
          "capacity": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "color": {
            "type": "string",
            "minLength": 1,
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "maxLength": 18
          }
        }
      },
      "PatchedIndividualEmployeeTimeSheetSettingsRequest": {
        "type": "object",
        "properties": {
          "experience_level": {
            "$ref": "#/components/schemas/EducatorExperienceLevelSettingsRequest"
          },
          "min_nb_hours_per_week": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "max_nb_hours_per_week": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 6
          },
          "educator": {
            "type": "integer"
          }
        }
      },
      "PatchedMenuRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "cycle": {
            "type": "string",
            "minLength": 1
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          },
          "repeat_until": {
            "type": "string",
            "format": "date"
          },
          "meals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MealRequest"
            }
          }
        }
      },
      "PatchedPaymentRequest": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "declined_reason": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DeclinedReasonEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "issue_date": {
            "type": "string",
            "format": "date-time"
          },
          "settlement_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 1
          },
          "comment": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1000
          },
          "payer": {
            "type": "integer",
            "nullable": true
          },
          "child": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "PatchedPresenceRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "child": {
            "$ref": "#/components/schemas/ChildRequest"
          },
          "clock_in_trusted_person": {
            "$ref": "#/components/schemas/TrustedPersonRequest"
          },
          "clock_in_temporary_trusted_person": {
            "$ref": "#/components/schemas/_TemporaryTrustedPersonRequest"
          },
          "clock_in_parent": {
            "$ref": "#/components/schemas/ParentRequest"
          },
          "clock_out_trusted_person": {
            "$ref": "#/components/schemas/TrustedPersonRequest"
          },
          "clock_out_temporary_trusted_person": {
            "$ref": "#/components/schemas/_TemporaryTrustedPersonRequest"
          },
          "clock_out_parent": {
            "$ref": "#/components/schemas/ParentRequest"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "clock_in_time": {
            "type": "string",
            "format": "time",
            "nullable": true
          },
          "clock_out_time": {
            "type": "string",
            "format": "time",
            "nullable": true
          },
          "absent": {
            "type": "boolean"
          }
        }
      },
      "PatchedPublicationUpdateRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "content": {
            "type": "object",
            "additionalProperties": {}
          },
          "publicized": {
            "type": "boolean"
          },
          "tag_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagUserRequest"
            }
          },
          "tag_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagGroupRequest"
            }
          },
          "qa_vote": {
            "$ref": "#/components/schemas/_QAVoteRequest"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_PublicationFileRequest"
            }
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "declined_reason": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DeclinedReasonEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "issue_date": {
            "type": "string",
            "format": "date-time"
          },
          "settlement_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 1
          },
          "comment": {
            "type": "string",
            "maxLength": 1000
          },
          "payer": {
            "type": "integer",
            "nullable": true
          },
          "child": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "amount",
          "comment",
          "id",
          "issue_date",
          "status"
        ]
      },
      "PaymentRequest": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "declined_reason": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DeclinedReasonEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "issue_date": {
            "type": "string",
            "format": "date-time"
          },
          "settlement_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 1
          },
          "comment": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1000
          },
          "payer": {
            "type": "integer",
            "nullable": true
          },
          "child": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "amount",
          "comment",
          "issue_date",
          "status"
        ]
      },
      "Phone": {
        "type": "object",
        "properties": {
          "kind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KindEnum"
              }
            ],
            "description": "Phone's kind\n\n* `LANDLINE` - LANDLINE\n* `CELLPHONE` - CELLPHONE"
          },
          "number": {
            "type": "string",
            "description": "Phone's number",
            "pattern": "\\d{3}-\\d{3}-\\d{4}"
          }
        },
        "required": [
          "kind",
          "number"
        ]
      },
      "PhoneRequest": {
        "type": "object",
        "properties": {
          "kind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KindEnum"
              }
            ],
            "description": "Phone's kind\n\n* `LANDLINE` - LANDLINE\n* `CELLPHONE` - CELLPHONE"
          },
          "number": {
            "type": "string",
            "minLength": 1,
            "description": "Phone's number",
            "pattern": "\\d{3}-\\d{3}-\\d{4}"
          }
        },
        "required": [
          "kind",
          "number"
        ]
      },
      "PollPublicationContent": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ]
      },
      "PostPublicationContent": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ]
      },
      "Presence": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "child": {
            "$ref": "#/components/schemas/Child"
          },
          "clock_in_trusted_person": {
            "$ref": "#/components/schemas/TrustedPerson"
          },
          "clock_in_temporary_trusted_person": {
            "$ref": "#/components/schemas/_TemporaryTrustedPerson"
          },
          "clock_in_parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "clock_out_trusted_person": {
            "$ref": "#/components/schemas/TrustedPerson"
          },
          "clock_out_temporary_trusted_person": {
            "$ref": "#/components/schemas/_TemporaryTrustedPerson"
          },
          "clock_out_parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "clock_in_time": {
            "type": "string",
            "format": "time",
            "nullable": true
          },
          "clock_out_time": {
            "type": "string",
            "format": "time",
            "nullable": true
          },
          "absent": {
            "type": "boolean"
          }
        },
        "required": [
          "child",
          "clock_in_parent",
          "clock_in_temporary_trusted_person",
          "clock_in_trusted_person",
          "clock_out_parent",
          "clock_out_temporary_trusted_person",
          "clock_out_trusted_person",
          "date",
          "id"
        ]
      },
      "PresenceRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "child": {
            "$ref": "#/components/schemas/ChildRequest"
          },
          "clock_in_trusted_person": {
            "$ref": "#/components/schemas/TrustedPersonRequest"
          },
          "clock_in_temporary_trusted_person": {
            "$ref": "#/components/schemas/_TemporaryTrustedPersonRequest"
          },
          "clock_in_parent": {
            "$ref": "#/components/schemas/ParentRequest"
          },
          "clock_out_trusted_person": {
            "$ref": "#/components/schemas/TrustedPersonRequest"
          },
          "clock_out_temporary_trusted_person": {
            "$ref": "#/components/schemas/_TemporaryTrustedPersonRequest"
          },
          "clock_out_parent": {
            "$ref": "#/components/schemas/ParentRequest"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "clock_in_time": {
            "type": "string",
            "format": "time",
            "nullable": true
          },
          "clock_out_time": {
            "type": "string",
            "format": "time",
            "nullable": true
          },
          "absent": {
            "type": "boolean"
          }
        },
        "required": [
          "child",
          "clock_in_parent",
          "clock_in_temporary_trusted_person",
          "clock_in_trusted_person",
          "clock_out_parent",
          "clock_out_temporary_trusted_person",
          "clock_out_trusted_person",
          "date"
        ]
      },
      "PrimaryContactEnum": {
        "enum": [
          "PARENT1",
          "PARENT2"
        ],
        "type": "string",
        "description": "* `PARENT1` - PARENT1\n* `PARENT2` - PARENT2"
      },
      "Publication": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "content": {
            "type": "object",
            "additionalProperties": {}
          },
          "type_version": {
            "type": "string"
          },
          "created_by_user": {
            "type": "integer",
            "readOnly": true
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "publicized": {
            "type": "boolean"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "readOnly": true
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicationReaction"
            },
            "readOnly": true
          },
          "tag_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagUser"
            }
          },
          "tag_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagGroup"
            }
          },
          "qa_vote": {
            "$ref": "#/components/schemas/_QAVote"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_PublicationFile"
            }
          }
        },
        "required": [
          "comments",
          "created_by_user",
          "date_created",
          "date_modified",
          "id",
          "reactions",
          "type_version"
        ]
      },
      "PublicationReaction": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "user": {
            "type": "integer",
            "readOnly": true
          },
          "publication": {
            "type": "integer"
          },
          "reaction": {
            "$ref": "#/components/schemas/ReactionEnum"
          }
        },
        "required": [
          "id",
          "publication",
          "reaction",
          "user"
        ]
      },
      "PublicationReactionRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "publication": {
            "type": "integer"
          },
          "reaction": {
            "$ref": "#/components/schemas/ReactionEnum"
          }
        },
        "required": [
          "publication",
          "reaction"
        ]
      },
      "PublicationRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "content": {
            "type": "object",
            "additionalProperties": {}
          },
          "type_version": {
            "type": "string",
            "minLength": 1
          },
          "publicized": {
            "type": "boolean"
          },
          "tag_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagUserRequest"
            }
          },
          "tag_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagGroupRequest"
            }
          },
          "qa_vote": {
            "$ref": "#/components/schemas/_QAVoteRequest"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_PublicationFileRequest"
            }
          }
        },
        "required": [
          "type_version"
        ]
      },
      "PublicationUpdate": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "content": {
            "type": "object",
            "additionalProperties": {}
          },
          "type_version": {
            "type": "string",
            "readOnly": true
          },
          "created_by_user": {
            "type": "integer",
            "readOnly": true
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "publicized": {
            "type": "boolean"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "readOnly": true
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicationReaction"
            },
            "readOnly": true
          },
          "tag_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagUser"
            }
          },
          "tag_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagGroup"
            }
          },
          "qa_vote": {
            "$ref": "#/components/schemas/_QAVote"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_PublicationFile"
            }
          }
        },
        "required": [
          "comments",
          "created_by_user",
          "date_created",
          "date_modified",
          "id",
          "reactions",
          "type_version"
        ]
      },
      "PublicationUpdateRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "content": {
            "type": "object",
            "additionalProperties": {}
          },
          "publicized": {
            "type": "boolean"
          },
          "tag_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagUserRequest"
            }
          },
          "tag_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_TagGroupRequest"
            }
          },
          "qa_vote": {
            "$ref": "#/components/schemas/_QAVoteRequest"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_PublicationFileRequest"
            }
          }
        }
      },
      "QAUserVote": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "user": {
            "type": "integer",
            "readOnly": true
          },
          "choice": {
            "type": "integer"
          }
        },
        "required": [
          "choice",
          "id",
          "user"
        ]
      },
      "QAUserVoteRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "choice": {
            "type": "integer"
          }
        },
        "required": [
          "choice"
        ]
      },
      "ReactionEnum": {
        "enum": [
          "LIKED",
          "DISLIKED"
        ],
        "type": "string",
        "description": "* `LIKED` - Liked\n* `DISLIKED` - Disliked"
      },
      "RecurrenceEnum": {
        "enum": [
          "RRULE:FREQ=DAILY",
          "RRULE:FREQ=WEEKLY",
          "RRULE:FREQ=WEEKLY;INTERVAL=2",
          "RRULE:FREQ=MONTHLY",
          "RRULE:FREQ=YEARLY"
        ],
        "type": "string",
        "description": "* `RRULE:FREQ=DAILY` - Daily\n* `RRULE:FREQ=WEEKLY` - Weekly\n* `RRULE:FREQ=WEEKLY;INTERVAL=2` - Bi-weeks\n* `RRULE:FREQ=MONTHLY` - Monthly\n* `RRULE:FREQ=YEARLY` - Yearly"
      },
      "Request": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer"
          },
          "params_to_sign": {
            "type": "object",
            "additionalProperties": {}
          }
        },
        "required": [
          "params_to_sign",
          "timestamp"
        ]
      },
      "RequestReportRequest": {
        "type": "object",
        "properties": {
          "all_children": {
            "type": "boolean",
            "default": false
          },
          "all_time": {
            "type": "boolean",
            "default": false
          },
          "children": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          },
          "lookup_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildInfoFieldRequest"
            }
          }
        }
      },
      "ScheduleRequestRequest": {
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "minLength": 1
          },
          "end_date": {
            "type": "string",
            "minLength": 1
          },
          "target_start_date": {
            "type": "string",
            "minLength": 1
          },
          "target_end_date": {
            "type": "string",
            "minLength": 1
          },
          "educator_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "educator_ids",
          "end_date",
          "start_date",
          "target_end_date",
          "target_start_date"
        ]
      },
      "SearchKindergartenMembers": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Child"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parent"
            }
          },
          "educators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Educator"
            }
          }
        },
        "required": [
          "children",
          "educators",
          "groups",
          "parents"
        ]
      },
      "SeverityEnum": {
        "enum": [
          "SEVERE",
          "MODERATE",
          "MILD"
        ],
        "type": "string",
        "description": "* `SEVERE` - severe\n* `MODERATE` - moderate\n* `MILD` - mild"
      },
      "SexEnum": {
        "enum": [
          "MALE",
          "FEMALE"
        ],
        "type": "string",
        "description": "* `MALE` - Male\n* `FEMALE` - Female"
      },
      "SharedLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "links": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "required": [
          "id",
          "links"
        ]
      },
      "StatusEnum": {
        "enum": [
          "NOT_ISSUED",
          "FUTURE",
          "PENDING",
          "APPROVED",
          "DECLINED"
        ],
        "type": "string",
        "description": "* `NOT_ISSUED` - Not issued\n* `FUTURE` - future\n* `PENDING` - Pending\n* `APPROVED` - Approved\n* `DECLINED` - Declined"
      },
      "SubTypeEnum": {
        "enum": [
          "Mood",
          "Sleep",
          "Hunger",
          "Pooping",
          "Activities",
          "Participation",
          "Humor"
        ],
        "type": "string",
        "description": "* `Mood` - Mood\n* `Sleep` - Sleep\n* `Hunger` - Hunger\n* `Pooping` - Pooping\n* `Activities` - Activities\n* `Participation` - Participation\n* `Humor` - Humor"
      },
      "TrustedPerson": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "birth_date": {
            "type": "string",
            "format": "date-time"
          },
          "first_name": {
            "type": "string",
            "maxLength": 20
          },
          "last_name": {
            "type": "string",
            "maxLength": 20
          },
          "sex": {
            "$ref": "#/components/schemas/SexEnum"
          },
          "date_joined": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "maxLength": 254
          },
          "link": {
            "$ref": "#/components/schemas/LinkEnum"
          },
          "pickup_code": {
            "type": "string",
            "maxLength": 6
          },
          "family": {
            "type": "integer"
          }
        },
        "required": [
          "address",
          "birth_date",
          "family",
          "first_name",
          "id",
          "last_name",
          "link",
          "phone",
          "sex"
        ]
      },
      "TrustedPersonRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "phone": {
            "$ref": "#/components/schemas/PhoneRequest"
          },
          "address": {
            "$ref": "#/components/schemas/AddressRequest"
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "birth_date": {
            "type": "string",
            "format": "date-time"
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "sex": {
            "$ref": "#/components/schemas/SexEnum"
          },
          "date_joined": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "minLength": 1,
            "maxLength": 254
          },
          "link": {
            "$ref": "#/components/schemas/LinkEnum"
          },
          "pickup_code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 6
          },
          "family": {
            "type": "integer"
          }
        },
        "required": [
          "address",
          "birth_date",
          "family",
          "first_name",
          "last_name",
          "link",
          "phone",
          "sex"
        ]
      },
      "WholeChild": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "schedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WholeChildInscriptionWeeklyChildSchedule"
              }
            ],
            "readOnly": true
          },
          "medical_file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChildMedicalFile"
              }
            ],
            "readOnly": true
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildNotes"
            },
            "readOnly": true
          },
          "history_log": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogEntry"
            },
            "readOnly": true
          },
          "family": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WholeChildFamily"
              }
            ],
            "readOnly": true
          },
          "siblings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WholeChildSibling"
            },
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "maxLength": 100
          },
          "birth_date": {
            "type": "string",
            "format": "date-time"
          },
          "sex": {
            "$ref": "#/components/schemas/SexEnum"
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "group": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WholeChildGroup"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "birth_date",
          "family",
          "first_name",
          "group",
          "history_log",
          "last_name",
          "medical_file",
          "notes",
          "schedule",
          "sex",
          "siblings"
        ]
      },
      "WholeChildAuditLog": {
        "type": "object",
        "properties": {
          "history_log": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogEntry"
            },
            "readOnly": true
          }
        },
        "required": [
          "history_log"
        ]
      },
      "WholeChildFamily": {
        "type": "object",
        "properties": {
          "parent1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ParentProfile"
              }
            ],
            "readOnly": true
          },
          "parent2": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ParentProfile"
              }
            ],
            "readOnly": true
          },
          "trusted_person": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrustedPerson"
            }
          },
          "primary_contact": {
            "$ref": "#/components/schemas/PrimaryContactEnum"
          }
        },
        "required": [
          "parent1",
          "parent2",
          "primary_contact",
          "trusted_person"
        ]
      },
      "WholeChildGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          },
          "color": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "maxLength": 18
          }
        },
        "required": [
          "name"
        ]
      },
      "WholeChildInscriptionWeeklyChildSchedule": {
        "type": "object",
        "properties": {
          "monday_start": {
            "type": "string",
            "format": "time",
            "nullable": true
          },
          "tuesday_start": {
            "type": "string",
            "format": "time",
            "nullable": true
          },
          "wednesday_start": {
            "type": "string",
            "format": "time",
            "nullable": true
          },
          "thursday_start": {
            "type": "string",
            "format": "time",
            "nullable": true
          },
          "friday_start": {
            "type": "string",
            "format": "time",
            "nullable": true
          },
          "saturday_start": {
            "type": "string",
            "format": "time",
            "nullable": true
          },
          "sunday_start": {
            "type": "string",
            "format": "time",
            "nullable": true
          }
        }
      },
      "WholeChildSibling": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "maxLength": 100
          },
          "birth_date": {
            "type": "string",
            "format": "date-time"
          },
          "sex": {
            "$ref": "#/components/schemas/SexEnum"
          },
          "avatar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "nullable": true
          }
        },
        "required": [
          "birth_date",
          "first_name",
          "id",
          "last_name",
          "sex"
        ]
      },
      "_ChatMessageFile": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "file": {
            "$ref": "#/components/schemas/File"
          }
        },
        "required": [
          "file",
          "id"
        ]
      },
      "_ChatMessageFileRequest": {
        "type": "object",
        "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/File"
          }
        },
        "required": [
          "file"
        ]
      },
      "_EducatorBreakSettings": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          },
          "general_settings": {
            "type": "integer"
          }
        },
        "required": [
          "end_time",
          "general_settings",
          "id",
          "name",
          "start_time"
        ]
      },
      "_EducatorBreakSettingsRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "start_time": {
            "type": "string",
            "format": "time"
          },
          "end_time": {
            "type": "string",
            "format": "time"
          },
          "general_settings": {
            "type": "integer"
          }
        },
        "required": [
          "end_time",
          "general_settings",
          "name",
          "start_time"
        ]
      },
      "_MealItem": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "ingredients": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 100
          },
          "allergens": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "photos": {
            "$ref": "#/components/schemas/FileCollection"
          }
        },
        "required": [
          "description",
          "id",
          "ingredients",
          "name",
          "photos"
        ]
      },
      "_MealItemRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "ingredients": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "allergens": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "photos": {
            "$ref": "#/components/schemas/FileCollection"
          }
        },
        "required": [
          "description",
          "ingredients",
          "name",
          "photos"
        ]
      },
      "_PublicationFile": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "file": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "file",
          "id"
        ]
      },
      "_PublicationFileRequest": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "file"
        ]
      },
      "_QAChoice": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "choice": {
            "type": "string",
            "maxLength": 255
          },
          "user_votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QAUserVote"
            },
            "readOnly": true
          },
          "user_votes_count": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "choice",
          "id",
          "user_votes",
          "user_votes_count"
        ]
      },
      "_QAChoiceRequest": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "choice": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "choice"
        ]
      },
      "_QAVote": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_QAChoice"
            }
          },
          "most_popular_choice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_QAChoice"
              }
            ],
            "readOnly": true
          },
          "question": {
            "type": "string"
          },
          "multi_choice": {
            "type": "boolean"
          }
        },
        "required": [
          "choices",
          "id",
          "most_popular_choice",
          "question"
        ]
      },
      "_QAVoteRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_QAChoiceRequest"
            }
          },
          "question": {
            "type": "string",
            "minLength": 1
          },
          "multi_choice": {
            "type": "boolean"
          }
        },
        "required": [
          "choices",
          "question"
        ]
      },
      "_Question": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "answer": {
            "type": "integer",
            "maximum": 5,
            "minimum": 1
          },
          "rating": {
            "type": "integer",
            "maximum": 3,
            "minimum": 1
          },
          "notes": {
            "type": "string"
          },
          "sub_type": {
            "$ref": "#/components/schemas/SubTypeEnum"
          }
        },
        "required": [
          "answer",
          "notes",
          "rating",
          "text"
        ]
      },
      "_TagGroup": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "tagged_group": {
            "type": "integer"
          }
        },
        "required": [
          "tagged_group"
        ]
      },
      "_TagGroupRequest": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "tagged_group": {
            "type": "integer"
          }
        },
        "required": [
          "tagged_group"
        ]
      },
      "_TagUser": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "tagged_user": {
            "type": "integer"
          }
        },
        "required": [
          "tagged_user"
        ]
      },
      "_TagUserRequest": {
        "type": "object",
        "description": "Required for all serializers that are nested under BaseNestedModelSerializer.",
        "properties": {
          "tagged_user": {
            "type": "integer"
          }
        },
        "required": [
          "tagged_user"
        ]
      },
      "_TemporaryTrustedPerson": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "maxLength": 20
          },
          "last_name": {
            "type": "string",
            "maxLength": 20
          },
          "phone": {
            "type": "string",
            "maxLength": 20
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "maxLength": 254
          },
          "pickup_code": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "family_id": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "family_id",
          "first_name",
          "id",
          "last_name",
          "phone",
          "pickup_code"
        ]
      },
      "_TemporaryTrustedPersonRequest": {
        "type": "object",
        "description": "Adds nested create feature",
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "phone": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "maxLength": 254
          }
        },
        "required": [
          "first_name",
          "last_name",
          "phone"
        ]
      }
    },
    "securitySchemes": {
      "jwtCookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "jwt-auth"
      },
      "jwtHeaderAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}